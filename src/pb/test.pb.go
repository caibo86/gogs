// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: test.proto

package pb

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Err int32

const (
	Err_Success Err = 0
	Err_OOS     Err = 1
)

var Err_name = map[int32]string{
	0: "Success",
	1: "OOS",
}

var Err_value = map[string]int32{
	"Success": 0,
	"OOS":     1,
}

func (x Err) String() string {
	return proto.EnumName(Err_name, int32(x))
}

func (Err) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{0}
}

type Color int32

const (
	Color_White Color = 0
	Color_Red   Color = 1
	Color_Green Color = 2
	Color_Blue  Color = 3
)

var Color_name = map[int32]string{
	0: "White",
	1: "Red",
	2: "Green",
	3: "Blue",
}

var Color_value = map[string]int32{
	"White": 0,
	"Red":   1,
	"Green": 2,
	"Blue":  3,
}

func (x Color) String() string {
	return proto.EnumName(Color_name, int32(x))
}

func (Color) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{1}
}

type Car struct {
	VarEnum              Color             `protobuf:"varint,1,opt,name=VarEnum,proto3,enum=pb.Color" json:"VarEnum,omitempty"`
	VarString            string            `protobuf:"bytes,2,opt,name=VarString,proto3" json:"VarString,omitempty"`
	VarBool              bool              `protobuf:"varint,3,opt,name=VarBool,proto3" json:"VarBool,omitempty"`
	VarInt32             int32             `protobuf:"varint,4,opt,name=VarInt32,proto3" json:"VarInt32,omitempty"`
	VarUInt32            uint32            `protobuf:"varint,5,opt,name=VarUInt32,proto3" json:"VarUInt32,omitempty"`
	VarInt64             int64             `protobuf:"varint,6,opt,name=VarInt64,proto3" json:"VarInt64,omitempty"`
	VarUInt64            uint64            `protobuf:"varint,7,opt,name=VarUInt64,proto3" json:"VarUInt64,omitempty"`
	VarSInt32            int32             `protobuf:"zigzag32,8,opt,name=VarSInt32,proto3" json:"VarSInt32,omitempty"`
	VarSInt64            int64             `protobuf:"zigzag64,9,opt,name=VarSInt64,proto3" json:"VarSInt64,omitempty"`
	VarFixed32           uint32            `protobuf:"fixed32,10,opt,name=VarFixed32,proto3" json:"VarFixed32,omitempty"`
	VarFixed64           uint64            `protobuf:"fixed64,11,opt,name=VarFixed64,proto3" json:"VarFixed64,omitempty"`
	VarSFixed32          int32             `protobuf:"fixed32,12,opt,name=VarSFixed32,proto3" json:"VarSFixed32,omitempty"`
	VarSFixed64          int64             `protobuf:"fixed64,13,opt,name=VarSFixed64,proto3" json:"VarSFixed64,omitempty"`
	VarFloat32           float32           `protobuf:"fixed32,14,opt,name=VarFloat32,proto3" json:"VarFloat32,omitempty"`
	VarFloat64           float64           `protobuf:"fixed64,15,opt,name=VarFloat64,proto3" json:"VarFloat64,omitempty"`
	VarBytes             []byte            `protobuf:"bytes,16,opt,name=VarBytes,proto3" json:"VarBytes,omitempty"`
	VarStruct            *Student          `protobuf:"bytes,17,opt,name=VarStruct,proto3" json:"VarStruct,omitempty"`
	VarStructs           []*Student        `protobuf:"bytes,18,rep,name=VarStructs,proto3" json:"VarStructs,omitempty"`
	VarMap               map[bool]*Student `protobuf:"bytes,19,rep,name=VarMap,proto3" json:"VarMap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	VarInt32S            []int32           `protobuf:"varint,20,rep,packed,name=VarInt32s,proto3" json:"VarInt32s,omitempty"`
	VarBools             []bool            `protobuf:"varint,21,rep,packed,name=VarBools,proto3" json:"VarBools,omitempty"`
	VarStrings           []string          `protobuf:"bytes,22,rep,name=VarStrings,proto3" json:"VarStrings,omitempty"`
	VarFloat32S          []float32         `protobuf:"fixed32,23,rep,packed,name=VarFloat32s,proto3" json:"VarFloat32s,omitempty"`
	VarFloat64S          []float64         `protobuf:"fixed64,24,rep,packed,name=VarFloat64s,proto3" json:"VarFloat64s,omitempty"`
	VarEnums             []Color           `protobuf:"varint,25,rep,packed,name=VarEnums,proto3,enum=pb.Color" json:"VarEnums,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Car) Reset()         { *m = Car{} }
func (m *Car) String() string { return proto.CompactTextString(m) }
func (*Car) ProtoMessage()    {}
func (*Car) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{0}
}
func (m *Car) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Car) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Car.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Car) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Car.Merge(m, src)
}
func (m *Car) XXX_Size() int {
	return m.Size()
}
func (m *Car) XXX_DiscardUnknown() {
	xxx_messageInfo_Car.DiscardUnknown(m)
}

var xxx_messageInfo_Car proto.InternalMessageInfo

func (m *Car) GetVarEnum() Color {
	if m != nil {
		return m.VarEnum
	}
	return Color_White
}

func (m *Car) GetVarString() string {
	if m != nil {
		return m.VarString
	}
	return ""
}

func (m *Car) GetVarBool() bool {
	if m != nil {
		return m.VarBool
	}
	return false
}

func (m *Car) GetVarInt32() int32 {
	if m != nil {
		return m.VarInt32
	}
	return 0
}

func (m *Car) GetVarUInt32() uint32 {
	if m != nil {
		return m.VarUInt32
	}
	return 0
}

func (m *Car) GetVarInt64() int64 {
	if m != nil {
		return m.VarInt64
	}
	return 0
}

func (m *Car) GetVarUInt64() uint64 {
	if m != nil {
		return m.VarUInt64
	}
	return 0
}

func (m *Car) GetVarSInt32() int32 {
	if m != nil {
		return m.VarSInt32
	}
	return 0
}

func (m *Car) GetVarSInt64() int64 {
	if m != nil {
		return m.VarSInt64
	}
	return 0
}

func (m *Car) GetVarFixed32() uint32 {
	if m != nil {
		return m.VarFixed32
	}
	return 0
}

func (m *Car) GetVarFixed64() uint64 {
	if m != nil {
		return m.VarFixed64
	}
	return 0
}

func (m *Car) GetVarSFixed32() int32 {
	if m != nil {
		return m.VarSFixed32
	}
	return 0
}

func (m *Car) GetVarSFixed64() int64 {
	if m != nil {
		return m.VarSFixed64
	}
	return 0
}

func (m *Car) GetVarFloat32() float32 {
	if m != nil {
		return m.VarFloat32
	}
	return 0
}

func (m *Car) GetVarFloat64() float64 {
	if m != nil {
		return m.VarFloat64
	}
	return 0
}

func (m *Car) GetVarBytes() []byte {
	if m != nil {
		return m.VarBytes
	}
	return nil
}

func (m *Car) GetVarStruct() *Student {
	if m != nil {
		return m.VarStruct
	}
	return nil
}

func (m *Car) GetVarStructs() []*Student {
	if m != nil {
		return m.VarStructs
	}
	return nil
}

func (m *Car) GetVarMap() map[bool]*Student {
	if m != nil {
		return m.VarMap
	}
	return nil
}

func (m *Car) GetVarInt32S() []int32 {
	if m != nil {
		return m.VarInt32S
	}
	return nil
}

func (m *Car) GetVarBools() []bool {
	if m != nil {
		return m.VarBools
	}
	return nil
}

func (m *Car) GetVarStrings() []string {
	if m != nil {
		return m.VarStrings
	}
	return nil
}

func (m *Car) GetVarFloat32S() []float32 {
	if m != nil {
		return m.VarFloat32S
	}
	return nil
}

func (m *Car) GetVarFloat64S() []float64 {
	if m != nil {
		return m.VarFloat64S
	}
	return nil
}

func (m *Car) GetVarEnums() []Color {
	if m != nil {
		return m.VarEnums
	}
	return nil
}

type Student struct {
	ID                   int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Age                  int32    `protobuf:"varint,3,opt,name=Age,proto3" json:"Age,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Student) Reset()         { *m = Student{} }
func (m *Student) String() string { return proto.CompactTextString(m) }
func (*Student) ProtoMessage()    {}
func (*Student) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{1}
}
func (m *Student) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Student) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Student.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Student) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Student.Merge(m, src)
}
func (m *Student) XXX_Size() int {
	return m.Size()
}
func (m *Student) XXX_DiscardUnknown() {
	xxx_messageInfo_Student.DiscardUnknown(m)
}

var xxx_messageInfo_Student proto.InternalMessageInfo

func (m *Student) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Student) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Student) GetAge() int32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func init() {
	proto.RegisterEnum("pb.Err", Err_name, Err_value)
	proto.RegisterEnum("pb.Color", Color_name, Color_value)
	proto.RegisterType((*Car)(nil), "pb.Car")
	proto.RegisterMapType((map[bool]*Student)(nil), "pb.Car.VarMapEntry")
	proto.RegisterType((*Student)(nil), "pb.Student")
}

func init() { proto.RegisterFile("test.proto", fileDescriptor_c161fcfdc0c3ff1e) }

var fileDescriptor_c161fcfdc0c3ff1e = []byte{
	// 582 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x94, 0xdd, 0x6e, 0xd3, 0x30,
	0x14, 0xc7, 0x77, 0xe2, 0xa6, 0x69, 0xdd, 0x7d, 0x64, 0x1e, 0x1f, 0x66, 0xa0, 0xea, 0x30, 0x84,
	0x64, 0x36, 0xa9, 0x42, 0x5d, 0x14, 0x21, 0x6e, 0x10, 0xdd, 0x07, 0xda, 0x05, 0x4c, 0x3a, 0x15,
	0xe5, 0x3a, 0xdb, 0xac, 0x31, 0xd1, 0x35, 0x95, 0x93, 0x22, 0x76, 0xcf, 0x43, 0xf0, 0x48, 0x5c,
	0xf2, 0x08, 0x68, 0xbc, 0x08, 0x8a, 0x93, 0x34, 0xde, 0xee, 0x7c, 0x7e, 0xff, 0x93, 0xbf, 0xed,
	0x73, 0x7c, 0xc2, 0x79, 0xae, 0xb3, 0x7c, 0x30, 0x37, 0x69, 0x9e, 0x0a, 0x6f, 0x7e, 0xb6, 0xf3,
	0x33, 0xe0, 0xec, 0x20, 0x31, 0xe2, 0x05, 0x0f, 0x26, 0x89, 0x39, 0x9a, 0x2d, 0xae, 0x25, 0x20,
	0xa8, 0xf5, 0x61, 0x77, 0x30, 0x3f, 0x1b, 0x1c, 0xa4, 0xd3, 0xd4, 0x50, 0xad, 0x88, 0x67, 0xbc,
	0x3b, 0x49, 0xcc, 0x38, 0x37, 0x57, 0xb3, 0x4b, 0xe9, 0x21, 0xa8, 0x2e, 0x35, 0x40, 0x48, 0x6b,
	0x31, 0x4a, 0xd3, 0xa9, 0x64, 0x08, 0xaa, 0x43, 0x75, 0x28, 0xb6, 0x79, 0x67, 0x92, 0x98, 0x93,
	0x59, 0xbe, 0x3f, 0x94, 0x2d, 0x04, 0xe5, 0xd3, 0x32, 0xae, 0x3c, 0x3f, 0x97, 0xa2, 0x8f, 0xa0,
	0xd6, 0xa8, 0x01, 0xcd, 0x97, 0x71, 0x24, 0xdb, 0x08, 0x8a, 0xd1, 0x32, 0x76, 0xbe, 0x8c, 0x23,
	0x19, 0x20, 0xa8, 0x16, 0x35, 0xa0, 0x3e, 0x6b, 0xe9, 0xdb, 0x41, 0x50, 0x9b, 0xd4, 0x00, 0x47,
	0x8d, 0x23, 0xd9, 0x45, 0x50, 0x82, 0x1a, 0x20, 0xfa, 0x9c, 0x4f, 0x12, 0x73, 0x7c, 0xf5, 0x43,
	0x5f, 0xec, 0x0f, 0x25, 0x47, 0x50, 0x01, 0x39, 0xc4, 0xd5, 0xe3, 0x48, 0xf6, 0x10, 0x54, 0x9b,
	0x1c, 0x22, 0x90, 0xf7, 0x0a, 0xb3, 0xda, 0x60, 0x15, 0x41, 0x6d, 0x90, 0x8b, 0xee, 0x64, 0xc4,
	0x91, 0x5c, 0x43, 0x50, 0x21, 0xb9, 0xa8, 0xde, 0x63, 0x9a, 0x26, 0xc5, 0x05, 0xd6, 0x11, 0x94,
	0x47, 0x0e, 0x71, 0xf5, 0x38, 0x92, 0x1b, 0x08, 0x0a, 0xc8, 0x21, 0x55, 0xe5, 0x46, 0x37, 0xb9,
	0xce, 0x64, 0x88, 0xa0, 0x56, 0x69, 0x19, 0x8b, 0x57, 0x75, 0x1f, 0x17, 0xe7, 0xb9, 0xdc, 0x44,
	0x50, 0xbd, 0x61, 0xaf, 0x68, 0xf7, 0x38, 0x5f, 0x5c, 0xe8, 0x59, 0x4e, 0x8d, 0x2a, 0xf6, 0xec,
	0x36, 0x65, 0x90, 0x49, 0x81, 0xec, 0x7e, 0xae, 0x23, 0x8b, 0x3d, 0xde, 0x9e, 0x24, 0xe6, 0x63,
	0x32, 0x97, 0x5b, 0x36, 0x71, 0xcb, 0xbe, 0xa1, 0xc4, 0x0c, 0x4a, 0x7a, 0x34, 0xcb, 0xcd, 0x0d,
	0x55, 0x29, 0x55, 0x0b, 0x6c, 0x3b, 0x32, 0xf9, 0x00, 0x99, 0xf2, 0xa9, 0x01, 0xf5, 0xf1, 0xd3,
	0x74, 0x9a, 0xc9, 0x87, 0xc8, 0x54, 0x87, 0x96, 0x71, 0x75, 0xf5, 0xf2, 0xd5, 0x65, 0xf2, 0x11,
	0x32, 0xd5, 0x25, 0x87, 0x54, 0xc5, 0xad, 0x0a, 0x95, 0xc9, 0xc7, 0xc8, 0x94, 0x47, 0x2e, 0x72,
	0x33, 0xe2, 0x28, 0x93, 0x12, 0x99, 0x02, 0x72, 0x91, 0x78, 0x69, 0xf7, 0x2f, 0x5e, 0x7d, 0x26,
	0x9f, 0x20, 0xbb, 0x3b, 0x10, 0x4b, 0x69, 0xfb, 0xd8, 0x1a, 0xd5, 0x77, 0x13, 0x21, 0x67, 0xdf,
	0xf4, 0x8d, 0x9d, 0xa0, 0x0e, 0x15, 0x4b, 0xf1, 0x9c, 0xfb, 0xdf, 0x93, 0xe9, 0x42, 0xdb, 0x71,
	0xb9, 0x57, 0xba, 0x52, 0x79, 0xeb, 0xbd, 0x81, 0x9d, 0x77, 0x3c, 0xa8, 0xa8, 0x58, 0xe7, 0xde,
	0xc9, 0xa1, 0xb5, 0x60, 0xe4, 0x9d, 0x1c, 0x0a, 0xc1, 0x5b, 0x9f, 0x92, 0x6b, 0x5d, 0xcd, 0x9b,
	0x5d, 0x17, 0xfb, 0xbc, 0xbf, 0xd4, 0x76, 0xcc, 0x7c, 0x2a, 0x96, 0xbb, 0x4f, 0x39, 0x3b, 0x32,
	0x46, 0xf4, 0x78, 0x30, 0x5e, 0x9c, 0x9f, 0xeb, 0x2c, 0x0b, 0x57, 0x44, 0xc0, 0xd9, 0xe9, 0xe9,
	0x38, 0x84, 0xdd, 0xd7, 0xdc, 0xb7, 0x07, 0x17, 0x5d, 0xee, 0x7f, 0xf9, 0x7a, 0x95, 0xeb, 0x52,
	0x24, 0x7d, 0x11, 0x42, 0xc1, 0x3e, 0x18, 0xad, 0x67, 0xa1, 0x27, 0x3a, 0xbc, 0x35, 0x9a, 0x2e,
	0x74, 0xc8, 0x46, 0xe1, 0xef, 0xdb, 0x3e, 0xfc, 0xb9, 0xed, 0xc3, 0xdf, 0xdb, 0x3e, 0xfc, 0xfa,
	0xd7, 0x5f, 0x39, 0x6b, 0xdb, 0x7f, 0xc6, 0xfe, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9f, 0x07,
	0x47, 0xf5, 0x41, 0x04, 0x00, 0x00,
}

func (m *Car) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Car) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Car) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.VarEnums) > 0 {
		dAtA2 := make([]byte, len(m.VarEnums)*10)
		var j1 int
		for _, num := range m.VarEnums {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintTest(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if len(m.VarFloat64S) > 0 {
		for iNdEx := len(m.VarFloat64S) - 1; iNdEx >= 0; iNdEx-- {
			f3 := math.Float64bits(float64(m.VarFloat64S[iNdEx]))
			i -= 8
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(f3))
		}
		i = encodeVarintTest(dAtA, i, uint64(len(m.VarFloat64S)*8))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if len(m.VarFloat32S) > 0 {
		for iNdEx := len(m.VarFloat32S) - 1; iNdEx >= 0; iNdEx-- {
			f4 := math.Float32bits(float32(m.VarFloat32S[iNdEx]))
			i -= 4
			encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(f4))
		}
		i = encodeVarintTest(dAtA, i, uint64(len(m.VarFloat32S)*4))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if len(m.VarStrings) > 0 {
		for iNdEx := len(m.VarStrings) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.VarStrings[iNdEx])
			copy(dAtA[i:], m.VarStrings[iNdEx])
			i = encodeVarintTest(dAtA, i, uint64(len(m.VarStrings[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xb2
		}
	}
	if len(m.VarBools) > 0 {
		for iNdEx := len(m.VarBools) - 1; iNdEx >= 0; iNdEx-- {
			i--
			if m.VarBools[iNdEx] {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
		}
		i = encodeVarintTest(dAtA, i, uint64(len(m.VarBools)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.VarInt32S) > 0 {
		dAtA6 := make([]byte, len(m.VarInt32S)*10)
		var j5 int
		for _, num1 := range m.VarInt32S {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintTest(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.VarMap) > 0 {
		for k := range m.VarMap {
			v := m.VarMap[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintTest(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i--
			if k {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x8
			i = encodeVarintTest(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x9a
		}
	}
	if len(m.VarStructs) > 0 {
		for iNdEx := len(m.VarStructs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VarStructs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTest(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x92
		}
	}
	if m.VarStruct != nil {
		{
			size, err := m.VarStruct.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.VarBytes) > 0 {
		i -= len(m.VarBytes)
		copy(dAtA[i:], m.VarBytes)
		i = encodeVarintTest(dAtA, i, uint64(len(m.VarBytes)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.VarFloat64 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.VarFloat64))))
		i--
		dAtA[i] = 0x79
	}
	if m.VarFloat32 != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.VarFloat32))))
		i--
		dAtA[i] = 0x75
	}
	if m.VarSFixed64 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.VarSFixed64))
		i--
		dAtA[i] = 0x69
	}
	if m.VarSFixed32 != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.VarSFixed32))
		i--
		dAtA[i] = 0x65
	}
	if m.VarFixed64 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.VarFixed64))
		i--
		dAtA[i] = 0x59
	}
	if m.VarFixed32 != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.VarFixed32))
		i--
		dAtA[i] = 0x55
	}
	if m.VarSInt64 != 0 {
		i = encodeVarintTest(dAtA, i, uint64((uint64(m.VarSInt64)<<1)^uint64((m.VarSInt64>>63))))
		i--
		dAtA[i] = 0x48
	}
	if m.VarSInt32 != 0 {
		i = encodeVarintTest(dAtA, i, uint64((uint32(m.VarSInt32)<<1)^uint32((m.VarSInt32>>31))))
		i--
		dAtA[i] = 0x40
	}
	if m.VarUInt64 != 0 {
		i = encodeVarintTest(dAtA, i, uint64(m.VarUInt64))
		i--
		dAtA[i] = 0x38
	}
	if m.VarInt64 != 0 {
		i = encodeVarintTest(dAtA, i, uint64(m.VarInt64))
		i--
		dAtA[i] = 0x30
	}
	if m.VarUInt32 != 0 {
		i = encodeVarintTest(dAtA, i, uint64(m.VarUInt32))
		i--
		dAtA[i] = 0x28
	}
	if m.VarInt32 != 0 {
		i = encodeVarintTest(dAtA, i, uint64(m.VarInt32))
		i--
		dAtA[i] = 0x20
	}
	if m.VarBool {
		i--
		if m.VarBool {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.VarString) > 0 {
		i -= len(m.VarString)
		copy(dAtA[i:], m.VarString)
		i = encodeVarintTest(dAtA, i, uint64(len(m.VarString)))
		i--
		dAtA[i] = 0x12
	}
	if m.VarEnum != 0 {
		i = encodeVarintTest(dAtA, i, uint64(m.VarEnum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Student) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Student) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Student) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Age != 0 {
		i = encodeVarintTest(dAtA, i, uint64(m.Age))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTest(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintTest(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTest(dAtA []byte, offset int, v uint64) int {
	offset -= sovTest(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Car) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VarEnum != 0 {
		n += 1 + sovTest(uint64(m.VarEnum))
	}
	l = len(m.VarString)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	if m.VarBool {
		n += 2
	}
	if m.VarInt32 != 0 {
		n += 1 + sovTest(uint64(m.VarInt32))
	}
	if m.VarUInt32 != 0 {
		n += 1 + sovTest(uint64(m.VarUInt32))
	}
	if m.VarInt64 != 0 {
		n += 1 + sovTest(uint64(m.VarInt64))
	}
	if m.VarUInt64 != 0 {
		n += 1 + sovTest(uint64(m.VarUInt64))
	}
	if m.VarSInt32 != 0 {
		n += 1 + sozTest(uint64(m.VarSInt32))
	}
	if m.VarSInt64 != 0 {
		n += 1 + sozTest(uint64(m.VarSInt64))
	}
	if m.VarFixed32 != 0 {
		n += 5
	}
	if m.VarFixed64 != 0 {
		n += 9
	}
	if m.VarSFixed32 != 0 {
		n += 5
	}
	if m.VarSFixed64 != 0 {
		n += 9
	}
	if m.VarFloat32 != 0 {
		n += 5
	}
	if m.VarFloat64 != 0 {
		n += 9
	}
	l = len(m.VarBytes)
	if l > 0 {
		n += 2 + l + sovTest(uint64(l))
	}
	if m.VarStruct != nil {
		l = m.VarStruct.Size()
		n += 2 + l + sovTest(uint64(l))
	}
	if len(m.VarStructs) > 0 {
		for _, e := range m.VarStructs {
			l = e.Size()
			n += 2 + l + sovTest(uint64(l))
		}
	}
	if len(m.VarMap) > 0 {
		for k, v := range m.VarMap {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTest(uint64(l))
			}
			mapEntrySize := 1 + 1 + l
			n += mapEntrySize + 2 + sovTest(uint64(mapEntrySize))
		}
	}
	if len(m.VarInt32S) > 0 {
		l = 0
		for _, e := range m.VarInt32S {
			l += sovTest(uint64(e))
		}
		n += 2 + sovTest(uint64(l)) + l
	}
	if len(m.VarBools) > 0 {
		n += 2 + sovTest(uint64(len(m.VarBools))) + len(m.VarBools)*1
	}
	if len(m.VarStrings) > 0 {
		for _, s := range m.VarStrings {
			l = len(s)
			n += 2 + l + sovTest(uint64(l))
		}
	}
	if len(m.VarFloat32S) > 0 {
		n += 2 + sovTest(uint64(len(m.VarFloat32S)*4)) + len(m.VarFloat32S)*4
	}
	if len(m.VarFloat64S) > 0 {
		n += 2 + sovTest(uint64(len(m.VarFloat64S)*8)) + len(m.VarFloat64S)*8
	}
	if len(m.VarEnums) > 0 {
		l = 0
		for _, e := range m.VarEnums {
			l += sovTest(uint64(e))
		}
		n += 2 + sovTest(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Student) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovTest(uint64(m.ID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	if m.Age != 0 {
		n += 1 + sovTest(uint64(m.Age))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTest(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTest(x uint64) (n int) {
	return sovTest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Car) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Car: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Car: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VarEnum", wireType)
			}
			m.VarEnum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VarEnum |= Color(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VarString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VarString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VarBool", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VarBool = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VarInt32", wireType)
			}
			m.VarInt32 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VarInt32 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VarUInt32", wireType)
			}
			m.VarUInt32 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VarUInt32 |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VarInt64", wireType)
			}
			m.VarInt64 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VarInt64 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VarUInt64", wireType)
			}
			m.VarUInt64 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VarUInt64 |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VarSInt32", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.VarSInt32 = v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VarSInt64", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.VarSInt64 = int64(v)
		case 10:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field VarFixed32", wireType)
			}
			m.VarFixed32 = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.VarFixed32 = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field VarFixed64", wireType)
			}
			m.VarFixed64 = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.VarFixed64 = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 12:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field VarSFixed32", wireType)
			}
			m.VarSFixed32 = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.VarSFixed32 = int32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 13:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field VarSFixed64", wireType)
			}
			m.VarSFixed64 = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.VarSFixed64 = int64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 14:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field VarFloat32", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.VarFloat32 = float32(math.Float32frombits(v))
		case 15:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field VarFloat64", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.VarFloat64 = float64(math.Float64frombits(v))
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VarBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VarBytes = append(m.VarBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.VarBytes == nil {
				m.VarBytes = []byte{}
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VarStruct", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VarStruct == nil {
				m.VarStruct = &Student{}
			}
			if err := m.VarStruct.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VarStructs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VarStructs = append(m.VarStructs, &Student{})
			if err := m.VarStructs[len(m.VarStructs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VarMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VarMap == nil {
				m.VarMap = make(map[bool]*Student)
			}
			var mapkey bool
			var mapvalue *Student
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var mapkeytemp int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkeytemp |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					mapkey = bool(mapkeytemp != 0)
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTest
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthTest
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Student{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTest(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTest
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.VarMap[mapkey] = mapvalue
			iNdEx = postIndex
		case 20:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.VarInt32S = append(m.VarInt32S, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTest
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTest
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.VarInt32S) == 0 {
					m.VarInt32S = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.VarInt32S = append(m.VarInt32S, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field VarInt32S", wireType)
			}
		case 21:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.VarBools = append(m.VarBools, bool(v != 0))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTest
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTest
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen
				if elementCount != 0 && len(m.VarBools) == 0 {
					m.VarBools = make([]bool, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.VarBools = append(m.VarBools, bool(v != 0))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field VarBools", wireType)
			}
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VarStrings", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VarStrings = append(m.VarStrings, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 23:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				v2 := float32(math.Float32frombits(v))
				m.VarFloat32S = append(m.VarFloat32S, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTest
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTest
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 4
				if elementCount != 0 && len(m.VarFloat32S) == 0 {
					m.VarFloat32S = make([]float32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
					iNdEx += 4
					v2 := float32(math.Float32frombits(v))
					m.VarFloat32S = append(m.VarFloat32S, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field VarFloat32S", wireType)
			}
		case 24:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.VarFloat64S = append(m.VarFloat64S, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTest
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTest
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.VarFloat64S) == 0 {
					m.VarFloat64S = make([]float64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.VarFloat64S = append(m.VarFloat64S, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field VarFloat64S", wireType)
			}
		case 25:
			if wireType == 0 {
				var v Color
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= Color(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.VarEnums = append(m.VarEnums, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTest
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTest
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.VarEnums) == 0 {
					m.VarEnums = make([]Color, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v Color
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= Color(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.VarEnums = append(m.VarEnums, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field VarEnums", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Student) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Student: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Student: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Age", wireType)
			}
			m.Age = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Age |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTest
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTest
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTest
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTest        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTest          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTest = fmt.Errorf("proto: unexpected end of group")
)
